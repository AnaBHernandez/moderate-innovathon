"""
üìä AN√ÅLISIS ENERG√âTICO SIMPLE
================================
Para MODERATE Innovathon - Equipo Ana + Profesora
Ana: Responsable de an√°lisis de negocio y presentaci√≥n
"""

import pandas as pd
import matplotlib.pyplot as plt

# =============================================
# 1. CARGAR DATOS (Lo m√°s simple)
# =============================================
print("=" * 50)
print("üìÇ CARGANDO DATOS DE ENERG√çA")
print("=" * 50)

# Leer archivo CSV
df = pd.read_csv('datos_energia.csv')

print(f"\n‚úÖ Datos cargados: {len(df)} registros")
print(f"üìÖ Desde {df['fecha'].min()} hasta {df['fecha'].max()}")
print("\nüîç Primeras filas:")
print(df.head())

# =============================================
# 2. CALCULAR M√âTRICAS B√ÅSICAS (F√°cil)
# =============================================
print("\n" + "=" * 50)
print("üìä CALCULANDO M√âTRICAS DE NEGOCIO")
print("=" * 50)

# Consumo total
consumo_total = df['consumo_kwh'].sum()
print(f"\nüí° Consumo total: {consumo_total:.1f} kWh")

# Generaci√≥n total (si hay paneles solares)
if 'generacion_kwh' in df.columns:
    generacion_total = df['generacion_kwh'].sum()
    print(f"‚ö° Generaci√≥n total: {generacion_total:.1f} kWh")
    
    # Autosuficiencia = cu√°nto generamos vs consumimos
    autosuficiencia = (generacion_total / consumo_total) * 100
    print(f"üéØ Autosuficiencia: {autosuficiencia:.1f}%")
    
    # Balance = diferencia
    balance = generacion_total - consumo_total
    if balance > 0:
        print(f"‚úÖ EXCEDENTE: +{balance:.1f} kWh")
    else:
        print(f"‚ö†Ô∏è D√âFICIT: {balance:.1f} kWh")

# =============================================
# 3. DETECTAR DESPERDICIO (Simple pero √∫til)
# =============================================
print("\n" + "=" * 50)
print("üîç DETECTANDO DESPERDICIO")
print("=" * 50)

# Si hay columna de ocupaci√≥n
if 'ocupacion' in df.columns:
    # Desperdicio = consumo cuando no hay nadie
    df['desperdicio'] = df.apply(
        lambda row: row['consumo_kwh'] if row['ocupacion'] == 0 else 0,
        axis=1
    )
    
    desperdicio_total = df['desperdicio'].sum()
    porcentaje_desperdicio = (desperdicio_total / consumo_total) * 100
    
    print(f"\nüö´ Desperdicio detectado: {desperdicio_total:.1f} kWh")
    print(f"üìâ Porcentaje de desperdicio: {porcentaje_desperdicio:.1f}%")
    
    # Calcular ahorro potencial en ‚Ç¨
    precio_kwh = 0.15  # 15 c√©ntimos por kWh (precio t√≠pico)
    ahorro_eur = desperdicio_total * precio_kwh
    
    print(f"üí∞ Ahorro potencial: {ahorro_eur:.2f} ‚Ç¨")

# =============================================
# 4. GR√ÅFICOS SIMPLES (Visual pero claro)
# =============================================
print("\n" + "=" * 50)
print("üìà GENERANDO VISUALIZACIONES")
print("=" * 50)

# Gr√°fico 1: Consumo a lo largo del tiempo
plt.figure(figsize=(12, 5))
plt.plot(df['fecha'], df['consumo_kwh'], marker='o', linewidth=2, markersize=4)
plt.title('üìä Consumo Energ√©tico en el Tiempo', fontsize=14, fontweight='bold')
plt.xlabel('Fecha')
plt.ylabel('Consumo (kWh)')
plt.grid(True, alpha=0.3)
plt.xticks(rotation=45)
plt.tight_layout()
plt.savefig('grafico_consumo.png', dpi=150)
print("‚úÖ Guardado: grafico_consumo.png")

# Gr√°fico 2: Comparaci√≥n (si hay generaci√≥n)
if 'generacion_kwh' in df.columns:
    plt.figure(figsize=(12, 5))
    plt.plot(df['fecha'], df['consumo_kwh'], label='Consumo', linewidth=2)
    plt.plot(df['fecha'], df['generacion_kwh'], label='Generaci√≥n', linewidth=2, linestyle='--')
    plt.title('‚ö° Consumo vs Generaci√≥n', fontsize=14, fontweight='bold')
    plt.xlabel('Fecha')
    plt.ylabel('Energ√≠a (kWh)')
    plt.legend()
    plt.grid(True, alpha=0.3)
    plt.xticks(rotation=45)
    plt.tight_layout()
    plt.savefig('grafico_balance.png', dpi=150)
    print("‚úÖ Guardado: grafico_balance.png")

# =============================================
# 5. RESUMEN EJECUTIVO (Para presentar)
# =============================================
print("\n" + "=" * 50)
print("üìã RESUMEN EJECUTIVO")
print("=" * 50)

print(f"""
SITUACI√ìN ACTUAL:
‚Ä¢ Consumo analizado: {consumo_total:.1f} kWh
‚Ä¢ Per√≠odo: {len(df)} registros
""")

if 'generacion_kwh' in df.columns:
    print(f"""‚Ä¢ Generaci√≥n solar: {generacion_total:.1f} kWh
‚Ä¢ Autosuficiencia: {autosuficiencia:.1f}%""")

if 'ocupacion' in df.columns:
    print(f"""
OPORTUNIDADES DETECTADAS:
‚Ä¢ Desperdicio: {porcentaje_desperdicio:.1f}% del consumo
‚Ä¢ Ahorro potencial: {ahorro_eur:.2f} ‚Ç¨ en este per√≠odo

RECOMENDACI√ìN:
‚Ä¢ Implementar control autom√°tico cuando edificio vac√≠o
‚Ä¢ Monitoreo en tiempo real para detectar anomal√≠as
‚Ä¢ Objetivo: Reducir desperdicio a <10%
""")

print("\n‚úÖ AN√ÅLISIS COMPLETADO")
print("=" * 50)